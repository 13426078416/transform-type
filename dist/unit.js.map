{"version":3,"sources":["../src/unit.js"],"names":["jsonSchema","typeName","length","fakeTypeName","toUpperCase","JSTTOptions","code","replace","trim","jsonSchemaToType","getDataTypeName","dataTypeGenerator","prettierContent","getDataTypes","defaultPrettierConfig","parser","trailingComma","printWidth","arrowParens","jsxBracketSameLine","endOfLine","proseWrap","bannerComment","style","dataTypeName","_","$1","processJsonSchema","title","id","minItems","maxItems","additionalProperties","properties","prop","propDef","required","map","items","forEach","json","params","prettier","format","files","dir","getType","data","resolve","content","reduce","res","childPath","childFilePath","path","require","key","value","fileName","push"],"mappings":"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","file":"unit.js","sourcesContent":["import { compile } from \"json-schema-to-typescript\";\nimport jsonSchemaGenerator from \"json-schema-generator\";\nimport { castArray, forOwn, random } from \"vtils\";\nimport prettier from \"prettier\";\nimport path from \"path\";\nconst defaultPrettierConfig = {\n  parser: \"typescript\",\n  trailingComma: \"all\",\n  printWidth: 100,\n  arrowParens: \"always\",\n  jsxBracketSameLine: false,\n  endOfLine: \"lf\",\n  proseWrap: \"always\",\n};\nconst JSTTOptions = {\n  bannerComment: \"\",\n  style: defaultPrettierConfig,\n};\n\n/**\n * 转为驼峰\n * @param {*} typeName string\n * @returns\n */\nexport function getDataTypeName(typeName) {\n  const dataTypeName = typeName.replace(/[\\-_]([A-z])/g, (_, $1) => {\n    return $1.toUpperCase();\n  });\n  return dataTypeName.trim().replace(/^(.)/, (_, $1) => $1.toUpperCase());\n}\n\nfunction processJsonSchema(jsonSchema) {\n  if (!jsonSchema || typeof jsonSchema !== \"object\") return jsonSchema;\n  delete jsonSchema.title;\n  delete jsonSchema.id;\n  delete jsonSchema.minItems;\n  delete jsonSchema.maxItems;\n  jsonSchema.additionalProperties = false;\n  if (jsonSchema.properties) {\n    forOwn(jsonSchema.properties, (_, prop) => {\n      const propDef = jsonSchema.properties[prop];\n      delete jsonSchema.properties[prop];\n      jsonSchema.properties[prop.trim()] = propDef;\n    });\n    jsonSchema.required =\n      jsonSchema.required && jsonSchema.required.map((prop) => prop.trim());\n  }\n\n  if (jsonSchema.properties) {\n    forOwn(jsonSchema.properties, processJsonSchema);\n  }\n\n  if (jsonSchema.items) {\n    castArray(jsonSchema.items).forEach(processJsonSchema);\n  }\n\n  return jsonSchema;\n}\n\n// 格式化jsonSchema\nexport function dataTypeGenerator(json) {\n  return processJsonSchema(json);\n}\n\n/**\n * jsonSchema转为type\n * @param {*} jsonSchema\n * @param {*} typeName string\n * @returns\n */\nexport async function jsonSchemaToType(jsonSchema, typeName) {\n  if (!jsonSchema || Object.keys(jsonSchema).length === 0) {\n    return `export interface ${typeName} {}`;\n  }\n  const fakeTypeName = `FAKE${random()}`.toUpperCase();\n  const code = await compile(jsonSchema, fakeTypeName, JSTTOptions);\n  return code.replace(fakeTypeName, typeName).trim();\n}\n// 美化代码格式\nexport function prettierContent(params) {\n  return prettier.format(params, defaultPrettierConfig);\n}\n\n/**\n * 获取文件内容的列表\n * @param {*} files 读取dir下边的文件列表\n * @param {*} dir // dir文件目录path\n * @returns Promise[]\n */\nexport function getDataTypes(files, dir) {\n  const getType = async (jsonSchema, data) => {\n    return new Promise(async (resolve) => {\n      const content = await jsonSchemaToType(jsonSchema, data.typeName);\n      resolve({ ...data, data: content });\n    });\n  };\n  return files.reduce((res, childPath) => {\n    const childFilePath = path.resolve(dir, childPath);\n    const content = require(childFilePath);\n    Object.entries(content).forEach(([key, value]) => {\n      const fileName = childPath.replace(/\\.[A-z0-9]+$/, \"\"); // 去掉文件后缀\n      const typeName = getDataTypeName(key); // 转为驼峰\n      const jsonSchema = dataTypeGenerator(jsonSchemaGenerator(value));\n      res.push(\n        getType(jsonSchema, {\n          fileName,\n          typeName,\n        })\n      );\n    });\n    return res;\n  }, []);\n}\n"]}