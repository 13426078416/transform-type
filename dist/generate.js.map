{"version":3,"sources":["../src/generate.js"],"names":["Generate","configFilName","configFileName","path","process","cwd","filePath","resolve","config","resolveConfig","outPath","output","inquirerRes","generate","entryDir","entry","outDir","files","fs","readdirSync","console","error","data","all","newData","reduce","res","cur","fileName","push","forEach","key","value","finalContent","dedent","join","outputFileSync","require","chalk","bold","defaultConfig","name","entryFileTmp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAMA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;IAEaA,Q,WAAAA,Q;AACX,sBAAc;AAAA;;AACZ,SAAKC,aAAL,GAAqBC,sBAArB;AACA,SAAKC,IAAL,GAAYC,QAAQC,GAAR,EAAZ;AACA,SAAKC,QAAL,GAAgBH,eAAKI,OAAL,CAAa,KAAKJ,IAAlB,EAAwB,KAAKF,aAA7B,CAAhB;AACA,SAAKO,MAAL,GAAc,KAAKC,aAAL,EAAd;AACD;;;;;;;;;;;AAEOC,uB,QAAa,KAAKP,I,GAAO,KAAKK,MAAL,CAAYG,M;;uBACjB,sCAAkBD,OAAlB,EAA2B,IAA3B,C;;;AAApBE,2B;;oBACDA,W;;;;;;;;AACL,qBAAKC,QAAL;;;;;;;;;;;;;;;;;;;;;;;;;AAGMC,wB,QAAc,KAAKX,I,GAAO,KAAKK,MAAL,CAAYO,K;AACtCC,sB,QAAY,KAAKb,I,GAAO,KAAKK,MAAL,CAAYG,M;AACtCM,qB;;;uBAEYC,kBAAGC,WAAH,CAAeL,QAAf,C;;;AAAdG,qB;;;;;;;;AAEAG,wBAAQC,KAAR;;;oBAEGJ,K;;;;;AACHG,wBAAQC,KAAR,CAAc,+BAAd;;;;AAGEC,oB;;;uBAEW,kBAAQC,GAAR,CAAY,wBAAaN,KAAb,EAAoBH,QAApB,CAAZ,C;;;AAAbQ,oB;;;;;;;;AAEAF,wBAAQC,KAAR;;;AAEF,oBAAI,CAACC,IAAL,EAAWF,QAAQC,KAAR,CAAc,mCAAd;AACLG,uB,GAAUF,KAAKG,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxC,sBAAI,CAACD,IAAIC,IAAIC,QAAR,CAAL,EAAwBF,IAAIC,IAAIC,QAAR,IAAoB,EAApB;AACxBF,sBAAIC,IAAIC,QAAR,EAAkBC,IAAlB,CAAuBF,IAAIL,IAA3B;AACA,yBAAOI,GAAP;AACD,iBAJe,EAIb,EAJa,C;;AAKhB,uCAAeF,OAAf,EAAwBM,OAAxB,CAAgC,iBAAkB;AAAA;AAAA,sBAAhBC,GAAgB;AAAA,sBAAXC,KAAW;;AAChD,sBAAM1B,WAAWH,eAAKI,OAAL,MAAgBS,MAAhB,EAA6Be,GAA7B,SAAjB;AACA;AACA,sBAAME,mBAAkBC,gBAAlB,mBAA2B,2BAC/BH,GAD+B,EAE/BC,MAAMG,IAAN,CAAW,IAAX,CAF+B,CAA3B,QAAN;AAIA,sBAAMT,MAAMR,kBAAGkB,cAAH,CAAkB9B,QAAlB,EAA4B,2BAAgB2B,YAAhB,CAA5B,CAAZ;AACD,iBARD;;;;;;;;;;;;;;;;;;oCAUc;AACd,UAAIzB,SAAS6B,QAAQ,KAAK/B,QAAb,CAAb;AACA,UAAI,CAACE,MAAL,EAAa;AACXY,gBAAQC,KAAR,iBACgBiB,gBAAMC,IAAN,MACT,KAAKtC,aADI,CADhB;AAKAO,iBAASgC,qBAAT;AACD;AACD,aAAOhC,MAAP;AACD;;;;6GACiBiC,I;;;;;;AACVnC,wB,GAAWH,eAAKI,OAAL,MAAgB,KAAKJ,IAArB,GAA4B,KAAKK,MAAL,CAAYO,KAAxC,EAAiD0B,IAAjD,C;;uBACS,sCAAkBnC,QAAlB,C;;;AAApBM,2B;;oBACDA,W;;;;;;;;AACLM,kCAAGkB,cAAH,CAAkB9B,QAAlB,EAA4B,oCAAmB4B,gBAAnB,mBAA4BQ,oBAA5B,EAA5B","file":"generate.js","sourcesContent":["import {\n  configFileName,\n  defaultConfig,\n  entryFileTmp,\n  outputFileTmp,\n} from \"./config\";\nimport path from \"path\";\nimport chalk from \"chalk\";\nimport fs from \"fs-extra\";\nimport { getDataTypes, prettierContent } from \"./unit/json\";\nimport dedent from \"dedent\";\nimport { inquirerOverwrite } from \"./unit/inquireAction\";\n\nexport class Generate {\n  constructor() {\n    this.configFilName = configFileName;\n    this.path = process.cwd();\n    this.filePath = path.resolve(this.path, this.configFilName);\n    this.config = this.resolveConfig();\n  }\n  async init() {\n    const outPath = `${this.path}${this.config.output}`;\n    const inquirerRes = await inquirerOverwrite(outPath, true);\n    if (!inquirerRes) return;\n    this.generate();\n  }\n  async generate() {\n    const entryDir = `${this.path}${this.config.entry}`;\n    const outDir = `${this.path}${this.config.output}`;\n    let files;\n    try {\n      files = await fs.readdirSync(entryDir);\n    } catch (error) {\n      console.error(error);\n    }\n    if (!files) {\n      console.error(\"File directory does not exist\");\n      return;\n    }\n    let data;\n    try {\n      data = await Promise.all(getDataTypes(files, entryDir));\n    } catch (error) {\n      console.error(error);\n    }\n    if (!data) console.error(\"Failed to get type file correctly\");\n    const newData = data.reduce((res, cur) => {\n      if (!res[cur.fileName]) res[cur.fileName] = [];\n      res[cur.fileName].push(cur.data);\n      return res;\n    }, {});\n    Object.entries(newData).forEach(([key, value]) => {\n      const filePath = path.resolve(`${outDir}`, `${key}.ts`);\n      //   if (!fs.existsSync(filePath)) fs.createFileSync(filePath);\n      const finalContent = `${dedent`${outputFileTmp(\n        key,\n        value.join(\"\\n\")\n      )}`}\\n`;\n      const res = fs.outputFileSync(filePath, prettierContent(finalContent));\n    });\n  }\n  resolveConfig() {\n    let config = require(this.filePath);\n    if (!config) {\n      console.error(\n        `Error load ${chalk.bold(\n          `${this.configFilName}`\n        )}: should export an object \\n`\n      );\n      config = defaultConfig;\n    }\n    return config;\n  }\n  async createEntry(name) {\n    const filePath = path.resolve(`${this.path}${this.config.entry}`, name);\n    const inquirerRes = await inquirerOverwrite(filePath);\n    if (!inquirerRes) return;\n    fs.outputFileSync(filePath, prettierContent(`${dedent`${entryFileTmp}`}`));\n  }\n}\n"]}