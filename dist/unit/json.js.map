{"version":3,"sources":["../../src/unit/json.js"],"names":["jsonSchema","typeName","length","fakeTypeName","toUpperCase","JSTTOptions","code","replace","trim","jsonSchemaToType","getDataTypeName","dataTypeGenerator","prettierContent","getDataTypes","dataTypeName","_","$1","processJsonSchema","title","id","minItems","maxItems","additionalProperties","properties","prop","propDef","required","map","items","forEach","json","params","prettier","format","defaultPrettierConfig","files","dir","getType","data","resolve","content","reduce","res","childPath","childFilePath","path","require","key","value","fileName","push"],"mappings":"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","file":"json.js","sourcesContent":["import { compile } from \"json-schema-to-typescript\";\nimport jsonSchemaGenerator from \"json-schema-generator\";\nimport { castArray, forOwn, random } from \"vtils\";\nimport prettier from \"prettier\";\nimport path from \"path\";\nimport { defaultPrettierConfig, JSTTOptions } from \"../config\";\n\n/**\n * 转为驼峰\n * @param {*} typeName string\n * @returns\n */\nexport function getDataTypeName(typeName) {\n  const dataTypeName = typeName.replace(/[\\-_]([A-z])/g, (_, $1) => {\n    return $1.toUpperCase();\n  });\n  return dataTypeName.trim().replace(/^(.)/, (_, $1) => $1.toUpperCase());\n}\n\nfunction processJsonSchema(jsonSchema) {\n  if (!jsonSchema || typeof jsonSchema !== \"object\") return jsonSchema;\n  delete jsonSchema.title;\n  delete jsonSchema.id;\n  delete jsonSchema.minItems;\n  delete jsonSchema.maxItems;\n  jsonSchema.additionalProperties = false;\n  if (jsonSchema.properties) {\n    forOwn(jsonSchema.properties, (_, prop) => {\n      const propDef = jsonSchema.properties[prop];\n      delete jsonSchema.properties[prop];\n      jsonSchema.properties[prop.trim()] = propDef;\n    });\n    jsonSchema.required =\n      jsonSchema.required && jsonSchema.required.map((prop) => prop.trim());\n  }\n\n  if (jsonSchema.properties) {\n    forOwn(jsonSchema.properties, processJsonSchema);\n  }\n\n  if (jsonSchema.items) {\n    castArray(jsonSchema.items).forEach(processJsonSchema);\n  }\n\n  return jsonSchema;\n}\n\n// 格式化jsonSchema\nexport function dataTypeGenerator(json) {\n  return processJsonSchema(json);\n}\n\n/**\n * jsonSchema转为type\n * @param {*} jsonSchema\n * @param {*} typeName string\n * @returns\n */\nexport async function jsonSchemaToType(jsonSchema, typeName) {\n  if (!jsonSchema || Object.keys(jsonSchema).length === 0) {\n    return `export interface ${typeName} {}`;\n  }\n  const fakeTypeName = `FAKE${random()}`.toUpperCase();\n  const code = await compile(jsonSchema, fakeTypeName, JSTTOptions);\n  return code.replace(fakeTypeName, typeName).trim();\n}\n// 美化代码格式\nexport function prettierContent(params) {\n  return prettier.format(params, defaultPrettierConfig);\n}\n\n/**\n * 获取文件内容的列表\n * @param {*} files 读取dir下边的文件列表\n * @param {*} dir // dir文件目录path\n * @returns Promise[]\n */\nexport function getDataTypes(files, dir) {\n  const getType = async (jsonSchema, data) => {\n    return new Promise(async (resolve) => {\n      const content = await jsonSchemaToType(jsonSchema, data.typeName);\n      resolve({ ...data, data: content });\n    });\n  };\n  return files.reduce((res, childPath) => {\n    const childFilePath = path.resolve(dir, childPath);\n    const content = require(childFilePath);\n    Object.entries(content).forEach(([key, value]) => {\n      const fileName = childPath.replace(/\\.[A-z0-9]+$/, \"\"); // 去掉文件后缀\n      const typeName = getDataTypeName(key); // 转为驼峰\n      const jsonSchema = dataTypeGenerator(jsonSchemaGenerator(value));\n      res.push(\n        getType(jsonSchema, {\n          fileName,\n          typeName,\n        })\n      );\n    });\n    return res;\n  }, []);\n}\n"]}